{"version":3,"sources":["components/markers-form-type-selection.js","config.js","services/location.service.js","components/location-input.js","components/markers-form.js","util/bing-map.util.js","components/map.js","layout/map-layout.js","App.js","reportWebVitals.js","index.js"],"names":["MarkersFormTypeSelection","setFormType","useState","FormTypes","coordinates","selectedFormType","setSelectedFormTypeState","className","Object","keys","map","formType","htmlFor","id","checked","type","name","onClick","setSelectedFormType","autoComplete","query","a","axios","get","config","process","data","resourceSets","resources","resource","point","lat","lng","console","error","LocationInput","emitCoordinates","selectedLocationName","setSelectedLocationName","locations","setLocations","debouncedStartAutoComplete","useCallback","debounce","currentValue","locationsRes","value","onInput","e","target","location","emitLocation","MarkersForm","Microsoft","props","setLat","setLng","useEffect","clickLocation","event","loadBingApi","key","callbackName","url","Promise","resolve","reject","script","document","createElement","async","defer","src","window","onerror","body","appendChild","Map","mapElRef","React","createRef","pins","polyLines","this","initMap","Maps","current","Events","addHandler","onMapClick","latitude","longitude","prevProps","prevState","snapshot","prevCoordinates","setMapCoordinates","pin","getCenter","length","Pushpin","color","colors","red","push","shift","entities","remove","setLocation","drawPolyLines","startingPinIndex","handlePolyLinesLogic","drawPolyLine","drawPolyGon","pin1","pin2","polyline","Polyline","pinToLocation","strokeColor","strokeRed","strokeThickness","polyGon","createPolyGon","polygon","Polygon","fillColor","polygonFillRed","Location","geometry","y","x","ref","Component","MapLayout","setCoordinates","setClickLocation","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.736a39bc.chunk.js","sourcesContent":["import FormTypes from '../constants/form-types.json';\r\nimport {useState} from \"react\";\r\n\r\nexport default function MarkersFormTypeSelection({setFormType}) {\r\n    const [selectedFormType, setSelectedFormTypeState] = useState(FormTypes.coordinates);\r\n\r\n    function setSelectedFormType(formType) {\r\n        setSelectedFormTypeState(formType);\r\n        setFormType(formType);\r\n    }\r\n\r\n    return (<div className=\"flex-column\">\r\n        {Object.keys(FormTypes).map(formType => <label htmlFor={formType} className=\"pointer\">\r\n            <input\r\n                id={formType}\r\n                checked={selectedFormType === formType}\r\n                type=\"radio\"\r\n                name=\"markers-form-type\"\r\n                onClick={() => setSelectedFormType(formType)}\r\n            />\r\n            {formType}\r\n        </label>)}\r\n    </div>)\r\n}\r\n","export default {\r\n    locationBaseUrl: 'http://dev.virtualearth.net/REST/v1/Locations'\r\n}\r\n","import axios from 'axios';\r\nimport config from \"../config\";\r\n\r\nexport const autoComplete = async query => {\r\n    try {\r\n        return (await axios.get(`${config.locationBaseUrl}?q=${query}&o=json&key=${process.env.REACT_APP_BING_MAPS_KEY}`))\r\n            // there is normally only 1 result sets for a request with these query params\r\n            .data.resourceSets[0].resources.map(resource => {\r\n                const [lat, lng] = resource.point.coordinates;\r\n                // return an object with only the required data\r\n                return {name: resource.name, lng, lat};\r\n            });\r\n    } catch (e) {\r\n        console.error(e);\r\n    }\r\n}\r\n","import {useCallback, useState} from \"react\";\r\nimport {debounce} from 'lodash';\r\nimport {autoComplete} from \"../services/location.service\";\r\n\r\nexport default function LocationInput({emitCoordinates}) {\r\n    const [selectedLocationName, setSelectedLocationName] = useState();\r\n    const [locations, setLocations] = useState([]);\r\n\r\n    // debouncing the user's input, wrapping startAutoComplete with debounce.\r\n    const debouncedStartAutoComplete = useCallback(debounce(startAutoComplete, 300), []);\r\n\r\n    function onInput(currentValue) {\r\n        // as soon as the user types anything,\r\n        // set its value to the input's value to reflect the typing\r\n        setSelectedLocationName(currentValue);\r\n        debouncedStartAutoComplete(currentValue);\r\n    }\r\n\r\n    async function startAutoComplete(currentValue) {\r\n        const locationsRes = await autoComplete(currentValue);\r\n        setLocations(locationsRes || []);\r\n    }\r\n\r\n    // emit the location data and reset locations state\r\n    function emitLocation(location) {\r\n        // set the inputs value to the selected location\r\n        setSelectedLocationName(location.name);\r\n        emitCoordinates({lat: location.lat, lng: location.lng});\r\n        setLocations([]);\r\n    }\r\n\r\n    function renderLocation(location) {\r\n        return (<div className=\"pointer\" onClick={() => emitLocation(location)}>\r\n            {location.name}\r\n        </div>)\r\n    }\r\n\r\n    return (<div>\r\n        <input type=\"text\" value={selectedLocationName} onInput={e => onInput(e.target.value)}/>\r\n        {locations.map(renderLocation)}\r\n    </div>)\r\n}\r\n","import {useEffect, useState} from \"react\";\r\nimport MarkersFormTypeSelection from \"./markers-form-type-selection\";\r\nimport FormTypes from '../constants/form-types.json';\r\nimport LocationInput from \"./location-input\";\r\n\r\nfunction MarkersForm(props) {\r\n    const [lat, setLat] = useState('');\r\n    const [lng, setLng] = useState('');\r\n    const [formType, setFormType] = useState(FormTypes.coordinates);\r\n\r\n    useEffect(() => {\r\n        if (props.clickLocation) {\r\n            const {clickLocation} = props;\r\n            setLng(clickLocation.lng);\r\n            setLat(clickLocation.lat);\r\n            if (formType === FormTypes.onClick) {\r\n                emitCoordinates(clickLocation);\r\n            }\r\n        }\r\n    }, [props.clickLocation])\r\n\r\n    function emitCoordinates(coordinates) {\r\n        props.emitCoordinates(coordinates);\r\n        setLat('');\r\n        setLng('');\r\n    }\r\n\r\n    function renderSelectedFormType() {\r\n        if (formType === FormTypes.coordinates) {\r\n            return (<div className=\"flex-column\">\r\n                {/* using 2 way binding on the inputs to allow changing the value from parent (by clicking the map, for example) */}\r\n                lat: <input value={lat} onInput={(event) => setLat(event.target.value)} type=\"number\"/>\r\n                lng: <input value={lng} onInput={(event) => setLng(event.target.value)} type=\"number\"/>\r\n            </div>)\r\n        } else if (formType === FormTypes.onClick) {\r\n            return '';\r\n        } else if (formType === FormTypes.location) {\r\n            return  <LocationInput emitCoordinates={emitCoordinates}></LocationInput>;\r\n        }\r\n    }\r\n\r\n    return (<div className=\"coordinates\">\r\n        <h4>Markers Form</h4>\r\n        <MarkersFormTypeSelection setFormType={setFormType}></MarkersFormTypeSelection>\r\n        {renderSelectedFormType()}\r\n        {formType === FormTypes.coordinates ? <button onClick={() => emitCoordinates({lat, lng})}>submit</button> : ''}\r\n    </div>)\r\n}\r\n\r\nexport default MarkersForm;\r\n","export let Microsoft;\r\n\r\nexport function loadBingApi(key) {\r\n    const callbackName = \"bingAPIReady\";\r\n    let url = `https://www.bing.com/api/maps/mapcontrol?callback=${callbackName}`;\r\n    if (key) {\r\n        url += `&key=${key}`;\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n        const script = document.createElement(\"script\");\r\n        script.type = \"text/javascript\";\r\n        script.async = true;\r\n        script.defer = true;\r\n        script.src = url;\r\n        window[callbackName] = () => {\r\n            Microsoft = window.Microsoft;\r\n            resolve();\r\n        };\r\n        script.onerror = (error) => {\r\n            reject(error);\r\n        };\r\n        document.body.appendChild(script);\r\n    });\r\n}\r\n","import React from \"react\";\r\nimport {loadBingApi, Microsoft} from \"../util/bing-map.util\";\r\nimport colors from '../constants/colors.json';\r\n\r\nexport default class Map extends React.Component {\r\n    mapElRef = React.createRef();\r\n    map;\r\n    pins = [];\r\n    polyLines = [];\r\n    polygon;\r\n\r\n    componentDidMount() {\r\n        this.initMap();\r\n    }\r\n\r\n    async initMap() {\r\n        await loadBingApi(process.env.REACT_APP_BING_MAPS_KEY)\r\n\r\n        this.map = new Microsoft.Maps.Map(this.mapElRef.current);\r\n        Microsoft.Maps.Events.addHandler(this.map, 'click', e =>\r\n            this.props.onMapClick({lat: e.location.latitude, lng: e.location.longitude}));\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {coordinates} = this.props;\r\n        const prevCoordinates = prevProps.coordinates;\r\n        if ((!prevCoordinates && coordinates) || (coordinates && coordinates.lat !== prevCoordinates.lat && coordinates.lng !== prevCoordinates.lng)) {\r\n            this.setMapCoordinates()\r\n        }\r\n    }\r\n\r\n    setMapCoordinates() {\r\n        const {lat, lng} = this.props.coordinates;\r\n        const location = {...this.map.getCenter(), latitude: lat, longitude: lng};\r\n        let pin;\r\n        if (this.pins.length < 3) {\r\n            pin = new Microsoft.Maps.Pushpin(location, {color: colors.red});\r\n            this.pins.push(pin)\r\n        } else {\r\n            pin = this.pins.shift();\r\n            this.map.entities.remove(pin);\r\n            pin.setLocation(location);\r\n            this.pins.push(pin);\r\n        }\r\n        this.map.entities.push(pin);\r\n        this.drawPolyLines(this.pins.length - 2);\r\n    }\r\n\r\n    drawPolyLines(startingPinIndex) {\r\n        this.handlePolyLinesLogic();\r\n        // only draw a line if the startingPinIndex is 0 or bugger\r\n        if (startingPinIndex >= 0) {\r\n            this.drawPolyLine(this.pins[startingPinIndex], this.pins[startingPinIndex + 1]);\r\n            // if startingPinIndex is equal to 1, this means a line was drawn between pin 1 (index) to pins 2.\r\n            // in this case, we want to paint another line between pin 2 to pin 0\r\n            if (startingPinIndex === 1) {\r\n                this.drawPolyLine(this.pins[2], this.pins[0]);\r\n                this.drawPolyGon();\r\n            }\r\n        }\r\n    }\r\n\r\n    handlePolyLinesLogic() {\r\n        // if there are already 3 polyLines,\r\n        if (this.polyLines.length === 3) {\r\n            // remove the first polyLine last one,\r\n            // in order to only keep the line between the second pin and the third pin\r\n            // since the first pin was removed\r\n            this.map.entities.remove(this.polyLines[0]);\r\n            this.map.entities.remove(this.polyLines[2]);\r\n            // also reset this.polyLines and include only the polyline between the second and third pins\r\n            this.polyLines = [this.polyLines[1]];\r\n        }\r\n    }\r\n\r\n    drawPolyLine(pin1, pin2) {\r\n        const polyline = new Microsoft.Maps.Polyline([\r\n            this.pinToLocation(pin1),\r\n            this.pinToLocation(pin2)\r\n        ], {\r\n            strokeColor: colors.strokeRed,\r\n            strokeThickness: 3\r\n        });\r\n        this.polyLines.push(polyline);\r\n        this.map.entities.push(polyline);\r\n    }\r\n\r\n    drawPolyGon() {\r\n        const polyGon = this.createPolyGon([\r\n            ...this.pins.map(this.pinToLocation),\r\n            this.pinToLocation(this.pins[0])\r\n        ]);\r\n        this.map.entities.push(polyGon);\r\n    }\r\n\r\n    createPolyGon(locations) {\r\n        // reset polygon if already exists\r\n        if (this.polygon) {\r\n            this.map.entities.remove(this.polygon)\r\n        }\r\n        this.polygon = new Microsoft.Maps.Polygon(locations, {\r\n            fillColor: colors.polygonFillRed,\r\n            strokeColor: colors.strokeRed,\r\n            strokeThickness: 3\r\n        });\r\n        return this.polygon;\r\n    }\r\n\r\n    pinToLocation(pin) {\r\n        return new Microsoft.Maps.Location(pin.geometry.y, pin.geometry.x);\r\n    }\r\n\r\n    render() {\r\n        return <div ref={this.mapElRef} className=\"map pointer\"/>;\r\n    }\r\n}\r\n","import '../assets/style/map-layout.scss';\r\nimport MarkersForm from \"../components/markers-form\";\r\nimport Map from \"../components/map\";\r\nimport {useState} from \"react\";\r\n\r\nfunction MapLayout() {\r\n    const [coordinates, setCoordinates] = useState();\r\n    const [clickLocation, setClickLocation] = useState();\r\n\r\n    function clickLocationRenderer() {\r\n        if (clickLocation) {\r\n            return (<div className='flex space-between'>\r\n                you clicked on:\r\n                <div>lng: {clickLocation.lng}</div>\r\n                <div>lat: {clickLocation.lat}</div>\r\n            </div>)\r\n        }\r\n        return '';\r\n    }\r\n\r\n    return (\r\n        <div className=\"map-layout\">\r\n            <header>\r\n                <h1>Polygon Map!</h1>\r\n                <div className='clicked-on'>\r\n                    {clickLocationRenderer()}\r\n                </div>\r\n            </header>\r\n            <div className=\"content flex\">\r\n                <MarkersForm emitCoordinates={setCoordinates} clickLocation={clickLocation}></MarkersForm>\r\n                <Map onMapClick={setClickLocation} coordinates={coordinates}></Map>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MapLayout;\r\n","import './index.scss';\nimport MapLayout from './layout/map-layout';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MapLayout></MapLayout>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}